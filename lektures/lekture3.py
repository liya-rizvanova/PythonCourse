'''
üí° –§—É–Ω–∫—Ü–∏—è ‚Äî —ç—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ

def function_name(x):
    # body line 1
    # ...
    # body line n
    # optional return
'''
# –ó–∞–¥–∞–Ω–∏–µ: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sumNumbers(n), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç 1 –¥–æ n.

def sumNumbers(n):
    summa = 0
    for i in range(1, n + 1): # —Ç.–∫. –Ω—É–∂–Ω—ã –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ [1, n], –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é range, –æ—Ç 1 –¥–æ n + 1, —Ç.–∫. range –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        summa += i
    print(summa)

sumNumbers(5)   # 15 - –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–µ —Å—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—Ö —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏

# —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –∫–∞–∫–æ–µ-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º return
def sumNumbers(n):
    summa = 0
    for i in range(1, n + 1):
        summa += i
    return summa

print(sumNumbers(5))

# –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏
def sumNumbers(n):
    summa = 0
    for i in range(1, n + 1):
        summa += i
    return summa

a = sumNumbers(5)
print(a)

# –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π–± –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def sumNumbers(n, y = "Hello"):   # y - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print(y)
    summa = 0
    for i in range(1, n + 1):
        summa += i
    return summa

print(sumNumbers(5))  # Hello 15

def sumNumbers(n, y = "Hello"):   # y - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print(y)
    summa = 0
    for i in range(1, n + 1):
        summa += i
    return summa

print(sumNumbers(5, "Hi"))   # Hi 15 - –≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def sumNumbers(n):
    summa = 0
    for i in range(1, n + 1):
        summa += i
    return summa
n = int(input())   # 7
print(sumNumbers(n))   # 28

# –µ—Å–ª–∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
def sum_str(*args):   # * —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    res = ''
    for i in args:
        res += i
    return res

print(sum_str('w', 'o', 'r', 'l', 'd'))   # world
print(sum_str('w', 'o', 'r', 'l', 'd', '!', '!', '!'))   # world!!!
print(sum_str(0, 0, 1))   # TypeError: can only concatenate str (not "int") to str

# –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –º–æ–∂yj –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é str():
def sum_str(*args):
    res = ''
    for i in args:
        res += str(i)
    return res

print(sum_str(0, 0, 1))   # 001

'''
–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤ —Ñ–∞–π–ª–µ function_file.py –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å 
–∫ —Å–µ–±–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥. –°–Ω–∞—á–∞–ª–∞ –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∞–π–ª—É(–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è). 
C –ø–æ–º–æ—â—å—é import –º—ã –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥—Ä—É–≥–æ–º —Å–∫—Ä–∏–ø—Ç–µ –∏ –¥–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ. 
–ú–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–±–æ—á–µ–º —Ñ–∞–π–ª–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:
Alias (–ø—Å–µ–≤–¥–æ–Ω–∏–º) ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞—ë—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –µt –∏–º–ø–æ—Ä—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞.
'''
import function_file

print(function_file.max1(5,9))

# –ª–∏–±–æ
from function_file import max1

print(max1(5,9))

# –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º –∏–º—è —Ñ—É–Ω—Ü–∏–∏, –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ *
from function_file import *   # * –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞

print(max1(5,9))

# –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –º–æ–¥—É–ª—è
import function_file as f1

print(f1.max1(5,9))

# –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
import function_file

print(function_file.other(1))   # –¶–µ–ª–æ–µ
print(function_file.other(2.3))   # 23
print(function_file.other(28))   # None

'''
–í Python –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–Ω–æ–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∏—Å–ª–æ.
–í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: symbol (—Å–∏–º–≤–æ–ª –∏–ª–∏ —á–∏—Å–ª–æ) –∏ count (—á–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç).
–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –æ–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É.
'''
def new_string(symbol, count):
    return symbol * count
print(new_string('!', 5))   # !!!!!
print(new_string('!'))   # TypeError missing 1 required positional argument: 'count'

'''
–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π count –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ 
(–Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π count —Ä–∞–≤–Ω–æ —Ç—Ä–µ–º.
'''
def new_string(symbol, count=3):
    return symbol * count
print(new_string('!', 5))   # !!!!!
print(new_string('!'))   # !!!
print(new_string(4))   # 12

'''
‚óè –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
‚óè –ü–µ—Ä–µ–¥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–∞–¥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å *.
–í –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ —á–∏—Å–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É:
'''
def concatenatio(*params):
    res = ""
    for item in params:
        res += item
    return res
print(concatenatio('a', 's', 'd', 'w'))   # asdw
print(concatenatio('a', '1'))   # a1
# print(concatenatio(1, 2, 3, 4))   # TypeError: ...

'''
–†–µ–∫—É—Ä—Å–∏—è
–í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fib(n), —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–µ—Ç—Å—è –±–∞–∑–∏—Å, –µ—Å–ª–∏ —á–∏—Å–ª–æ n —Ä–∞–≤–Ω–æ 1 –∏–ª–∏ 2, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏
–≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–≤–Ω—ã 1, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1. –ö–∞–∫ –º—ã —Ä–∞–Ω–µ–µ –ø—Ä–æ–≥–æ–≤–æ—Ä–∏–ª–∏:
'''
def fib(n):
    if n in [1, 2]:
        return 1
    return fib(n - 1) + fib(n - 2)
list_1 = []
for i in range(1, 10):
    list_1.append(fib(i - 2))
print(list_1)   # [1, 1, 2, 3, 5, 8, 13, 21, 34]

'''
–î–≤–∞ –¥—Ä—É–≥–∞ —Ä–µ—à–∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É: –æ–¥–∏–Ω –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, 
–¥—Ä—É–≥–æ–π –¥–æ–ª–∂–µ–Ω –æ—Ç–≥–∞–¥–∞—Ç—å.
'''
def quicksort(array):
    if len(array) < 2:
        return array
    else:
        pivot = array[0]
        less = [i for i in array[1:] if i <= pivot]
        greater = [i for i in array[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)
print(quicksort([10, 5, 2, 3]))
'''
‚óè 1-–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏:
‚óã array = [10, 5, 2, 3]
‚óã pivot = 10
‚óã less = [5, 2, 3]
‚óã greater = []
‚óã return quicksort([5, 2, 3]) + [10] + quicksort([])
‚óè 2-–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏:
‚óã array = [5, 2, 3]
‚óã pivot = 5
‚óã less = [2, 3]
‚óã greater = []
‚óã return quicksort([2, 3]) + [5] + quicksort([]) # –í–∞–∂–Ω–æ! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ
–∑–¥–µ—Å—å –ø–æ–º–∏–º–æ –≤—ã–∑–æ–≤–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ [10]
‚óè 3-–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏:
‚óã array = [2, 3]
‚óã return [2, 3] # –°—Ä–∞–±–æ—Ç–∞–ª –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π —Ä–µ–∫—É—Ä—Å–∏–∏
–ù–∞ —ç—Ç–æ–º —Ä–∞–±–æ—Ç–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º: 
[2, 3] + [5] + [10] = [2, 3, 5, 10]
'''

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º
def merge_sort(nums):
    if len(nums) > 1:
        mid = len(nums) // 2
        left = nums[:mid]
        right = nums[mid:]
        merge_sort(left)
        merge_sort(right)
        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                nums[k] = left[i]
                i += 1
            else:
                nums[k] = right[j]
                j += 1
            k += 1
        while i < len(left):
            nums[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            nums[k] = right[j]
            j += 1
            k += 1
nums = [38, 27, 43, 3, 9, 82, 10]
merge_sort(nums)
print(nums)
